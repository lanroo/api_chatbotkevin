generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenant (Cliente)
model Tenant {
  id            String      @id @default(uuid())
  name          String
  plan          String      @default("starter")
  apiKey        String      @unique
  status        String      @default("active") // active, suspended, deleted
  config        Json        @default("{ \"theme\": { \"primaryColor\": \"#007bff\", \"secondaryColor\": \"#6c757d\", \"fontFamily\": \"Inter\" }, \"chatbot\": { \"name\": \"Assistant\", \"welcomeMessage\": \"Hello! How can I help you today?\", \"systemPrompt\": \"You are a helpful assistant\", \"temperature\": 0.7, \"maxTokens\": 2000 }, \"limits\": { \"maxMessagesPerDay\": 1000, \"maxTokensPerMonth\": 100000, \"maxConcurrentChats\": 5 } }")
  usageMetrics  Json?      @default("{ \"messagesCount\": 0, \"tokensUsed\": 0, \"activeChats\": 0, \"avgResponseTime\": 0 }")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  lastActivityAt DateTime   @default(now())

  // Relacionamentos
  users         User[]
  messages      Message[]
  analytics     Analytics[]
  chatMessages  ChatMessage[]
  usageLogs     UsageLog[]

  @@map("tenants")
}

// Usuário
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  role      String   @default("user")
  mfaEnabled Boolean @default(false)
  mfaSecret String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  ChatMessage[]

  @@index([tenantId])

  @@map("users")
}

// Mensagem
model Message {
  id          String   @id @default(uuid())
  content     String
  type        String   @default("text")
  sender      String
  tenantId    String
  createdAt   DateTime @default(now())

  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@map("messages")
}

// Analytics
model Analytics {
  id          String   @id @default(uuid())
  tenantId    String
  metric      String   // tokens_used, response_time, satisfaction, etc
  value       Float
  timestamp   DateTime @default(now())
  metadata    Json?    // dados adicionais específicos da métrica

  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([timestamp])
  @@index([metric])
  @@map("analytics")
}

model ChatMessage {
  id           String    @id @default(uuid())
  content      String
  role         String
  type         String    @default("text")
  createdAt    DateTime  @default(now())
  tenantId     String
  userId       String
  responseTime Int?
  satisfaction Int?
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([userId])
  @@map("chat_messages")
}

// Novo modelo para logs de uso detalhados
model UsageLog {
  id          String   @id @default(uuid())
  tenantId    String
  eventType   String   // message_sent, token_used, chat_started, etc
  value       Float
  metadata    Json?
  timestamp   DateTime @default(now())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([timestamp])
  @@index([eventType])
  @@map("usage_logs")
} 